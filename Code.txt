`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2018/06/30 14:26:56
// Design Name: 
// Module Name: PmodCLP
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module PmodCLP(
    input CLK,
    input btnr,
    input [3:0] key,
    output [7:0] JA,
    output [6:4] JB
    );

	// ===========================================================================
	// 							  Parameters, Regsiters, and Wires
	// ===========================================================================

   //LCD control state machine
	parameter [3:0] stFunctionSet = 0,						// Initialization states
						 stDisplayCtrlSet = 1,
						 stDisplayClear = 2,
						 stPowerOn_Delay = 3,					// Delay states
						 stFunctionSet_Delay = 4,
						 stDisplayCtrlSet_Delay = 5,
						 stDisplayClear_Delay = 6,
						 stInitDne = 7,							// Display characters and perform standard operations
						 stActWr = 8,
						 stCharDelay = 9;							// Write delay for operations
	
	
	/* These constants are used to initialize the LCD pannel.

		--  FunctionSet:
								Bit 0 and 1 are arbitrary
								Bit 2:  Displays font type(0=5x8, 1=5x11)
								Bit 3:  Numbers of display lines (0=1, 1=2)
								Bit 4:  Data length (0=4 bit, 1=8 bit)
								Bit 5-7 are set
		--  DisplayCtrlSet:
								Bit 0:  Blinking cursor control (0=off, 1=on)
								Bit 1:  Cursor (0=off, 1=on)
								Bit 2:  Display (0=off, 1=on)
								Bit 3-7 are set
		--  DisplayClear:
								Bit 1-7 are set	*/
		
	reg [6:0] clkCount = 7'b0000000;
	reg [20:0] count = 21'b000000000000000000000;	// 21 bit count variable for timing delays
	wire delayOK;													// High when count has reached the right delay time
	reg oneUSClk;													// Signal is treated as a 1 MHz clock	
	reg [3:0] stCur = stPowerOn_Delay;						// LCD control state machine
	reg [3:0] stNext;
	wire writeDone;	                                          // Command set finish
	wire expand;			        						
	
    reg [5:0] limit=5'd20;                              //附加段数组末尾
    reg [5:0] set=5'd20;                                //原始数组末尾
    reg [4:0] lcd_cmd_ptr;                              //控制字数组下角标变量

    reg [8:0] posi = 8'h85;                            //位置变量，用来控制显示屏显示位置
	reg [9:0] LCD_CMDS[0:22];                          //存储控制字数组
	always @ (posedge CLK) begin
       if (btnr) begin
            LCD_CMDS[0] =  {2'b00, 8'h3c};// 0, Function Set  h34一行  对应状态转换图中要
            LCD_CMDS[1] =  {2'b00, 8'h0C};// 1, Display ON, Cursor OFF, Blink OFF
            LCD_CMDS[2] =  {2'b00, 8'h01};// 2, Clear Display
            LCD_CMDS[3] =  {2'b00, 8'h02};// 3, Return Home 
            
            LCD_CMDS[4] =  {2'b00, 8'h40};// set cgram
            LCD_CMDS[5] =  {2'b10, 8'h04};// 3write cgram 
            LCD_CMDS[6] =  {2'b10, 8'h0a};// 3write cgram
            LCD_CMDS[7] =  {2'b10, 8'h04};// 3write cgram
            LCD_CMDS[8] =  {2'b10, 8'h1f};// 3write cgram
            LCD_CMDS[9] =  {2'b10, 8'h04};// 3write cgram
            LCD_CMDS[10] =  {2'b10, 8'h04};// 3write cgram
            LCD_CMDS[11] =  {2'b10, 8'h0a};// 3write cgram
            LCD_CMDS[12] =  {2'b10, 8'h11};// 3write cgram
            
            LCD_CMDS[13] =  {2'b00, 8'h84};// set ddram
            LCD_CMDS[14] =  {2'b10, 8'h00};// 3write ddram 
            
            LCD_CMDS[15] =  {2'b00, 8'h1c};// 23, 1c右移 方式是地址不变 显示对应位置变
            LCD_CMDS[16] =  {2'b00, 8'h1c};// 23, Shift left  最后一个将一直执行 1c右移
            LCD_CMDS[17] =  {2'b00, 8'h1c};// 23, Shift left  最后一个将一直执行 1c右移
            LCD_CMDS[18] =  {2'b00, 8'h1c};// 23, Shift left  最后一个将一直执行 1c右移
            
            LCD_CMDS[19] =  {2'b10, 8'h00};// 3write ddram 
            //LCD_CMDS[20] =  {2'b10, 8'h00};// 3write ddram 
            
            //LCD_CMDS[20] =  {2'b00, posi};// set ddram
            //LCD_CMDS[21] =  {2'b10, 8'h00};// 3write ddram 
            LCD_CMDS[20] <=  {2'b00, posi};
            LCD_CMDS[21] <=  {2'b00, posi};
            LCD_CMDS[22] <=  {2'b10, 8'h00};// 3write ddram  
	   end
       else begin
           if (key[0]) begin
               limit <= 20;
               LCD_CMDS[20] =  {2'b00, 8'h18};// 3write ddram 
           end
           else if(key[1]) begin
               limit <= 20;
               LCD_CMDS[20] =  {2'b00, 8'h1c};
           end
           else if(key[2]) begin
               limit <= 22;
               if(posi>8'hf0) begin
                    posi = posi - 8'h40;
                end
                //lcd_cmd_ptr <= 5'd20;
                LCD_CMDS[20] <=  {2'b00, posi};
                //LCD_CMDS[21] <=  {2'b00, posi-1};
                LCD_CMDS[21] <=  {2'b10, 8'h00};// 3write ddram  
           end
           else if(key[3]) begin
               limit <= 22;
               if(posi<8'ha7) begin
                    posi = posi + 8'h40;
               end
               //lcd_cmd_ptr <= 5'd20;

               LCD_CMDS[20] <=  {2'b00, posi};
              // LCD_CMDS[21] <=  {2'b00, posi-1};
               LCD_CMDS[21] <=  {2'b10, 8'h00};// 3write ddram  
           end
           else begin   
               limit <= 20;
               LCD_CMDS[20] <=  {2'b00, posi};
           end
       end
   end
   
   

    //assign  LCD_CMDS[18] =  {2'b00, 8'h1c};// 23, Shift left  最后一个将一直执行 1c右移
                      

	

	// ===========================================================================
	// 										Implementation
	// ===========================================================================

	// This process counts to 100, and then resets.  It is used to divide the clock signal.
	// This makes oneUSClock peak aprox. once every 1microsecond
	always @(posedge CLK) begin

			if(clkCount == 7'b0100100) begin//if(clkCount == 7'b1100100) begin
					clkCount <= 7'b0000000;
					oneUSClk <= ~oneUSClk;///oneUSClk=50*clk
			end
			else begin
					clkCount <= clkCount + 1'b1;
			end

	end


	// This process increments the count variable unless delayOK = 1.
	always @(posedge oneUSClk) begin
	
			if(delayOK == 1'b1) begin
					count <= 21'b000000000000000000000;
			end
			else begin
					count <= count + 1'b1;//count oneUSClk计数
			end
	end


	// Determines when count has gotten to the right number, depending on the state.
	assign delayOK = (
				((stCur == stPowerOn_Delay) && (count == 21'b111101000010010000000)) ||				// 2000000	 	-> 20 ms
				((stCur == stFunctionSet_Delay) && (count == 21'b000000000111110100000)) ||		// 4000 			-> 40 us
				((stCur == stDisplayCtrlSet_Delay) && (count == 21'b000000000111110100000)) ||	// 4000 			-> 40 us
				((stCur == stDisplayClear_Delay) && (count == 21'b000100111000100000000)) ||		// 160000 		-> 1.6 ms
				((stCur == stCharDelay) && (count == 21'b000111111011110100000))						// 260000		-> 2.6 ms - Max Delay for character writes and shifts
	) ? 1'b1 : 1'b0; //判断是否延时已足够


	// writeDone goes high when all commands have been run	
	assign writeDone = (lcd_cmd_ptr >= limit) ? 1'b1 : 1'b0; //数组18位则已写屏幕完毕 之后18只左移
	//assign expand = key[2] || key[3]; //上下其中之一按下则扩展数组

	
	
	
	// Increments the pointer so the statemachine goes through the commands
	always @(posedge oneUSClk) begin
			if((stNext == stInitDne || stNext == stDisplayCtrlSet || stNext == stDisplayClear) && writeDone == 1'b0) begin //writedone后不再+
					lcd_cmd_ptr <= lcd_cmd_ptr + 1'b1; //只在特定控制下 变数组
			end
			else if(stCur == stPowerOn_Delay || stNext == stPowerOn_Delay) begin
					lcd_cmd_ptr <= 5'b00000;//清零
			end
			else if(writeDone == 1'b1 && lcd_cmd_ptr>=limit) begin
                    lcd_cmd_ptr <= set;
            end
			else begin
					lcd_cmd_ptr <= lcd_cmd_ptr;
			end
	end
	
	
	// This process runs the LCD state machine
	always @(posedge oneUSClk) begin
			if(btnr == 1'b1) begin
					stCur <= stPowerOn_Delay;
			end
			else begin
					stCur <= stNext;
			end
	end
	

	// This process generates the sequence of outputs needed to initialize and write to the LCD screen
	always @(stCur or delayOK or writeDone or lcd_cmd_ptr) begin ///////////?/???
			case (stCur)
				// Delays the state machine for 20ms which is needed for proper startup.
				stPowerOn_Delay : begin
						if(delayOK == 1'b1) begin
							stNext <= stFunctionSet;
						end
						else begin
							stNext <= stPowerOn_Delay;
						end
				end
					
				// This issues the function set to the LCD as follows 
				// 8 bit data length, 1 lines, font is 5x8.
				stFunctionSet : begin
						stNext <= stFunctionSet_Delay;
				end
				
				// Gives the proper delay of 37us between the function set and
				// the display control set.
				stFunctionSet_Delay : begin
						if(delayOK == 1'b1) begin
							stNext <= stDisplayCtrlSet;
						end
						else begin
							stNext <= stFunctionSet_Delay;
						end
				end
				
				// Issuse the display control set as follows
				// Display ON,  Cursor OFF, Blinking Cursor OFF.
				stDisplayCtrlSet : begin
						stNext <= stDisplayCtrlSet_Delay;
				end

				// Gives the proper delay of 37us between the display control set
				// and the Display Clear command. 
				stDisplayCtrlSet_Delay : begin
						if(delayOK == 1'b1) begin
							stNext <= stDisplayClear;
						end
						else begin
							stNext <= stDisplayCtrlSet_Delay;
						end
				end
				
				// Issues the display clear command.
				stDisplayClear	: begin
						stNext <= stDisplayClear_Delay;
				end

				// Gives the proper delay of 1.52ms between the clear command
				// and the state where you are clear to do normal operations.
				stDisplayClear_Delay : begin
						if(delayOK == 1'b1) begin
							stNext <= stInitDne;
						end
						else begin
							stNext <= stDisplayClear_Delay;
						end
				end
				
				// State for normal operations for displaying characters, changing the
				// Cursor position etc.
				stInitDne : begin		
						stNext <= stActWr;
				end

				// stActWr
				stActWr : begin
						stNext <= stCharDelay;
				end
					
				// Provides a max delay between instructions.
				stCharDelay : begin
						if(delayOK == 1'b1) begin
							stNext <= stInitDne;
						end
						else begin
							stNext <= stCharDelay;
						end
				end

				default : stNext <= stPowerOn_Delay;

			endcase
	end
		
		
	// Assign outputs
	assign JB[4] = LCD_CMDS[lcd_cmd_ptr][9]; //[数组位][第几位] writedone 后不再变
	assign JB[5] = LCD_CMDS[lcd_cmd_ptr][8]; //writedone 后不再变
	assign JA = LCD_CMDS[lcd_cmd_ptr][7:0];
	assign JB[6] = (stCur == stFunctionSet || stCur == stDisplayCtrlSet || stCur == stDisplayClear || stCur == stActWr) ? 1'b1 : 1'b0;//'1'：读模式使能，'下降沿'：写数据

endmodule
